#ifndef __CINT__
#include <RooGlobalFunc.h>
#endif   
#include <iostream>
#include <iomanip>
#include <RooRealVar.h>
#include <RooDataSet.h>
#include <RooDataHist.h>
#include <RooGaussian.h>
#include <RooLandau.h>
#include <RooAddPdf.h>
#include <RooFFTConvPdf.h>
#include <TCanvas.h>
#include <RooPlot.h>
#include <TAxis.h>
#include <TH1F.h>
#include <TROOT.h>
#include <TFile.h>
#include <TKey.h>
#include <TMacro.h>
#include <stdio.h>
#include <string.h>
 
using namespace RooFit; 
using namespace std;

vector<TObject*> hist_objects;
//TObject* test_object;

void loopdir(TDirectory* dir, string histname)
{
	
	TDirectory *dirsav = gDirectory;
	TIter keys_iter(dir->GetListOfKeys());
	TKey* key;
	
	while ((key = (TKey*)keys_iter()))
	{
		//cout << key1->GetClassName() << endl;
		//if (strcmp("TDirectoryFile",key1->GetClassName())==0)
		
		if (key->IsFolder())
		{
			dir->cd(key->GetName());
			TDirectory *subdir = gDirectory;
			//subfolder->cd();
			loopdir(subdir, histname);
			dirsav->cd();
			continue;
		}
		else
		{
			string keyname = key->GetName();
			size_t found = keyname.find(histname);
			if (found == 0) hist_objects.push_back(key->ReadObj());
		}
		//else if (keyname.find(histname) != -1)
		//{
			//hist_objects.push_back(key->ReadObj());
			////test_object = key->ReadObj()
			////cout << "Histograms names: " << key->GetName() << endl;
		//}
	}
}

//void loopdir() {
   //// example of script to loop on all the objects of a ROOT file directory
   //// and print on Postscript all TH1 derived objects
   //// This script uses the file generated by tutorial hsimple.C
   ////Author: Rene Brun

   //TFile *f1 = TFile::Open("hsimple.root");
   //TIter next(f1->GetListOfKeys());
   //TKey *key;
   //TCanvas c1;
   //c1.Print("hsimple.ps[");
   //while ((key = (TKey*)next())) {
      //TClass *cl = gROOT->GetClass(key->GetClassName());
      //if (!cl->InheritsFrom("TH1")) continue;
      //TH1 *h = (TH1*)key->ReadObj();
      //h->Draw();
      //c1.Print("hsimple.ps");
   //}
   //c1.Print("hsimple.ps]");
//}

int main(int argc, char **argv)
{
	if (argc < 2) {
		cout << "Please add a root file as argument" << endl;
		return(1);
	}	
	
	TFile *data_file = TFile::Open(argv[1]);
	string histogram_name = "hist_s631_c0446_b0_k26";
	loopdir(data_file, histogram_name);
	
	for (unsigned int i =0; i<hist_objects.size(); ++i)
	{
		cout << hist_objects[i]->GetName() << endl;
	}
	
	
	
	 // Declare variables x,mean,sigma with associated name, title, initial value and allowed range
	RooRealVar x("ADC", "ADC", 100,250);
	
	//Construct Landau
	RooRealVar lmean("lmean","mean of landau",150,100,200) ;
	RooRealVar lsigma("lsigma","width of landau",10,2,20) ;
	RooLandau landau("landau","landau PDF",x,lmean,lsigma) ; 
	
	//Construct gauss
	RooRealVar gmean("gmean","mean of gauss",150) ;
	RooRealVar gsigma("gsigma","width of gauss",10,2,20) ;
	RooLandau gauss("gauss","gauss PDF",x,gmean,gsigma) ; 
	
	RooPlot* frame = x.frame(Title("Strip 631 of Tracker"));
	
	// CONSTRUCT CONVOLUTION PDF
	// Set #bins to be used for FFT sampling to 10000
	x.setBins(150, "cache");
	RooFFTConvPdf langauss("langauss", "landau (X) gauss", x, landau, gauss);
	
	
	//Building of the modesl
	//RooAddPdf model("model" , "g+a", RooArgList(landau, landau2), RooArgList(a,b));
	TH1F* data_histogram;
	 //Import data from histogram.
	 for (unsigned int i = 0; i<hist_objects.size(); ++i)
	{
		//
		data_histogram = (TH1F*)hist_objects[i];
	}
	RooDataHist datahist("datahist","datahist",x,Import(*data_histogram)) ;
	datahist.plotOn(frame);

	//// Fit pdf to data
	langauss.fitTo(datahist) ;
	langauss.plotOn(frame);
	
	//landau.fitTo(datahist) ;
	//landau.plotOn(frame);
	
	
	//// Print values of mean and sigma (that now reflect fitted values and errors)
	//mean.Print() ;
	//sigma.Print() ;
	
	// Draw all frames on a canvas
	TCanvas* c = new TCanvas("multi_landau","multi_landau",1600,1200) ;
	frame->Draw() ;
	
	c->SaveAs("./langauss_fit_to_beam_channel.png");
	
  
	return 0;
}
